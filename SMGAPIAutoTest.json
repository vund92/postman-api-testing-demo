{
	"info": {
		"_postman_id": "6acc50f9-dcd1-4d06-975b-eef51863ee3f",
		"name": "SMG Interview Test - Part 2 API Automation Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4408933"
	},
	"item": [
		{
			"name": "MediaWiki web service API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCase = pm.iterationData.get(\"testcase\");\r",
							"\r",
							"switch(testCase){\r",
							"    case \"Execute API call with valid required parameters\":\r",
							"    case \"Execute API call with valid required parameters and valid optional parameters\":{\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Test schema\", ()=>{\r",
							"            if(testCase == \"Execute API call with valid required parameters\"){\r",
							"                pm.response.to.have.jsonSchema(pm.environment.get(\"schema1\"));\r",
							"            }\r",
							"            else pm.response.to.have.jsonSchema(pm.environment.get(\"schema2\"));\r",
							"            }\r",
							"        );\r",
							"        \r",
							"        pm.test(\"Response time is less than 2000ms\", function () {\r",
							"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Test exist headers\", ()=>{\r",
							"            let headers = pm.response.headers;\r",
							"            for(let i=0; i < headers.lengthl; i++){\r",
							"                let header = headers[i];\r",
							"                pm.expect(header).to.be.oneOf(['date','server','x-content-type-options','x-search-id','x-frame-options','content-disposition',\r",
							"            'vary','cache-control','content-type','content-encoding','age','x-cache','x-cache-status','server-timing','strict-transport-security',\r",
							"            'report-to','nel','x-client-ip','accept-ranges','transfer-encoding','content-length']);\r",
							"            }\r",
							"        });\r",
							"\r",
							"        pm.test(\"Test cookies\", ()=>{\r",
							"            pm.expect(pm.cookies.has('GeoIP')).to.be.true;\r",
							"        });\r",
							"\r",
							"        let totalHitsAfterFirstRequest = pm.response.json().query.searchinfo.totalhits; \r",
							"        postman.setNextRequest(\"MediaWiki web service API\");\r",
							"        postman.setNextRequest(null);\r",
							"        let totalHitsAfterSecondRequest = pm.response.json().query.searchinfo.totalhits; \r",
							"        pm.test(\"Test nothing has changed after call API\", ()=>{\r",
							"            pm.expect(totalHitsAfterFirstRequest).to.eql(totalHitsAfterSecondRequest);\r",
							"            }\r",
							"        );\r",
							"        console.log(totalHitsAfterFirstRequest);\r",
							"        console.log(totalHitsAfterSecondRequest);\r",
							"\r",
							"        break;\r",
							"    }\r",
							"    case \"Execute API call with srsearch parameter having no value\":\r",
							"    case \"Execute API call with missing required parameters\":\r",
							"    case \"Execute API call with invalid query parameters\":{\r",
							"        pm.test(\"Invalid case return with error message\", () => {\r",
							"            pm.expect(pm.response.text()).to.include(\"error\");\r",
							"        });\r",
							"        console.log(pm.response.text());\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Response time is less than 2000ms\", function () {\r",
							"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Test exist headers\", ()=>{\r",
							"            let headers = pm.response.headers;\r",
							"            for(let i=0; i < headers.lengthl; i++){\r",
							"                let header = headers[i];\r",
							"                pm.expect(header).to.be.oneOf(['date','server','x-content-type-options','x-search-id','x-frame-options','content-disposition',\r",
							"            'vary','cache-control','content-type','content-encoding','age','x-cache','x-cache-status','server-timing','strict-transport-security',\r",
							"            'report-to','nel','x-client-ip','accept-ranges','transfer-encoding','content-length']);\r",
							"            }\r",
							"        });\r",
							"\r",
							"        pm.test(\"Test cookies\", ()=>{\r",
							"            pm.expect(pm.cookies.has('GeoIP')).to.be.true;\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    }\r",
							"    case \"Execute API call with endpoint longer than 255 characters\":{\r",
							"        pm.test(\"Test endpoint longer than 255 characters\", () => {\r",
							"            pm.expect(pm.response.json().query.searchinfo.totalhits).to.eql(0);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Response time is less than 2000ms\", function () {\r",
							"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Test exist headers\", ()=>{\r",
							"            let headers = pm.response.headers;\r",
							"            for(let i=0; i < headers.lengthl; i++){\r",
							"                let header = headers[i];\r",
							"                pm.expect(header).to.be.oneOf(['date','server','x-content-type-options','x-search-id','x-frame-options','content-disposition',\r",
							"            'vary','cache-control','content-type','content-encoding','age','x-cache','x-cache-status','server-timing','strict-transport-security',\r",
							"            'report-to','nel','x-client-ip','accept-ranges','transfer-encoding','content-length']);\r",
							"            }\r",
							"        });\r",
							"\r",
							"        pm.test(\"Test cookies\", ()=>{\r",
							"            pm.expect(pm.cookies.has('GeoIP')).to.be.true;\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    }\r",
							"    case \"Execute API call with illegal characters in parameters\":{\r",
							"        pm.test(\"Test illegal characters in parameters\", () => {\r",
							"            pm.expect(pm.response.json().query.searchinfo.totalhits).to.greaterThan(0);\r",
							"        });\r",
							"        console.log(pm.response.json().query.searchinfo.totalhits);\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Response time is less than 2000ms\", function () {\r",
							"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Test exist headers\", ()=>{\r",
							"            let headers = pm.response.headers;\r",
							"            for(let i=0; i < headers.lengthl; i++){\r",
							"                let header = headers[i];\r",
							"                pm.expect(header).to.be.oneOf(['date','server','x-content-type-options','x-search-id','x-frame-options','content-disposition',\r",
							"            'vary','cache-control','content-type','content-encoding','age','x-cache','x-cache-status','server-timing','strict-transport-security',\r",
							"            'report-to','nel','x-client-ip','accept-ranges','transfer-encoding','content-length']);\r",
							"            }\r",
							"        });\r",
							"\r",
							"        pm.test(\"Test cookies\", ()=>{\r",
							"            pm.expect(pm.cookies.has('GeoIP')).to.be.true;\r",
							"        });\r",
							"        \r",
							"        break;\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"schema1\",{\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"batchcomplete\",\r",
							"        \"continue\",\r",
							"        \"query\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"batchcomplete\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"continue\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"sroffset\",\r",
							"                \"continue\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"sroffset\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"continue\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"query\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"searchinfo\",\r",
							"                \"search\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"searchinfo\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"required\": [\r",
							"                        \"totalhits\"\r",
							"                    ],\r",
							"                    \"properties\": {\r",
							"                        \"totalhits\": {\r",
							"                            \"type\": \"integer\"\r",
							"                        }\r",
							"                    }\r",
							"                },\r",
							"                \"search\": {\r",
							"                    \"type\": \"array\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.environment.set(\"schema2\",{\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"batchcomplete\",\r",
							"        \"continue\",\r",
							"        \"query\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"batchcomplete\": {\r",
							"            \"type\": \"boolean\"\r",
							"        },\r",
							"        \"continue\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"sroffset\",\r",
							"                \"continue\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"sroffset\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"continue\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"query\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"searchinfo\",\r",
							"                \"search\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"searchinfo\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"required\": [\r",
							"                        \"totalhits\"\r",
							"                    ],\r",
							"                    \"properties\": {\r",
							"                        \"totalhits\": {\r",
							"                            \"type\": \"integer\"\r",
							"                        }\r",
							"                    }\r",
							"                },\r",
							"                \"search\": {\r",
							"                    \"type\": \"array\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"let action = pm.iterationData.get(\"action\");\r",
							"let format = pm.iterationData.get(\"format\");\r",
							"let list = pm.iterationData.get(\"list\");\r",
							"let srsearch = pm.iterationData.get(\"srsearch\");\r",
							"let cont = pm.iterationData.get(\"continue\");\r",
							"let formatversion = pm.iterationData.get(\"formatversion\");\r",
							"let sroffset = pm.iterationData.get(\"sroffset\");\r",
							"\r",
							"let queryParams = \"?\";\r",
							"if(action != \"\"){\r",
							"    queryParams = queryParams+\"action=\"+action+\"&\";\r",
							"}\r",
							"if(format != \"\"){\r",
							"    queryParams = queryParams+\"format=\"+format+\"&\";\r",
							"}\r",
							"if(list != \"\"){\r",
							"    queryParams = queryParams+\"list=\"+list+\"&\";\r",
							"}\r",
							"if(srsearch != \"\"){\r",
							"    queryParams = queryParams+\"srsearch=\"+srsearch+\"&\";\r",
							"}\r",
							"if(cont != \"\"){\r",
							"    queryParams = queryParams+\"continue=\"+cont+\"&\";\r",
							"}\r",
							"if(formatversion != \"\"){\r",
							"    queryParams = queryParams+\"formatversion=\"+formatversion+\"&\";\r",
							"}\r",
							"if(sroffset != \"\"){\r",
							"    queryParams = queryParams+\"sroffset=\"+sroffset+\"&\";\r",
							"}\r",
							"\r",
							"pm.environment.set(\"queryParams\",queryParams);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://en.wikipedia.org/w/api.php{{queryParams}}",
					"protocol": "https",
					"host": [
						"en",
						"wikipedia",
						"org"
					],
					"path": [
						"w",
						"api.php{{queryParams}}"
					]
				}
			},
			"response": []
		}
	]
}